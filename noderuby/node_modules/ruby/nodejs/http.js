var $ = require('ruby');
var NodeJS = require('ruby/nodejs');
var EventEmitter = require('ruby/nodejs/event_emitter');

var node_http = require('http');

var HTTP = $.define_module_under(NodeJS, 'HTTP');

var Server = $.define_class_under(HTTP, 'Server');
var Request = $.define_class_under(HTTP, 'Request');
var Response = $.define_class_under(HTTP, 'Response');

// Server

$.module_include(Server, EventEmitter);

Server.events = {
  'request': function(request, response) {
    var ruby_req = this.funcall(Request, 'new'),
        ruby_resp = this.funcall(Response, 'new');
    ruby_req.internal = request;
    ruby_resp.internal = response;
    return [ruby_req, ruby_resp];
  },
  'clientError': function(exception) {
    return [exception.toString()];
  },
  'close': null,
};

Server.events['checkContinue'] = Server.events['request'];

$.define_method(Server, 'initialize', 0, function(self) {
  self.internal = node_http.createServer();

  return this.builtin.Qnil;
});

$.define_method(Server, 'listen', -1, function(self, args) {
  this.check_args(args, 1, 1);
  var hostname = args[1];
  if(hostname) hostname = this.to_str(args[1]).value;

  self.internal.listen(this.to_int(args[0]), hostname);

  return self;
});

$.define_method(Server, 'close', 0, function(self) {
  self.internal.close();

  return self;
});

// Request

$.module_include(Request, EventEmitter);

$.define_method(Request, 'method', 0, function(self) {
  return this.string_new(self.internal.method);
});

$.define_method(Request, 'url', 0, function(self) {
  return this.string_new(self.internal.url);
});

$.define_method(Request, 'headers', 0, function(self) {
  var hash = this.funcall(this.c.Hash, 'new');

  for(var header in self.internal.headers) {
    this.funcall(hash, '[]=', this.string_new(header),
                this.string_new(self.internal.headers[header]));
  }

  return hash;
});

$.define_method(Request, 'http_version', 0, function(self) {
  return this.string_new(self.internal.httpVersion);
});

// Response

$.define_method(Response, 'writeContinue', 0, function(self) {
  self.internal.writeContinue();

  return this.builtin.Qnil;
});

$.define_method(Response, 'writeHead', 2, function(self, status, headers) {
  status = this.to_int(status);
  headers = this.check_convert_type(headers, this.c.Hash, 'to_hash');

  var node_headers = {};
  var iterator = function(self, name, value) {
    name = this.to_str(name).value;
    value = this.to_str(value).value;

    node_headers[name] = value;

    return $.builtin.Qnil;
  };
  this.funcall2(headers, 'each', [], this.lambda(iterator, 2));

  self.internal.writeHead(status, node_headers);

  return self;
});

$.define_method(Response, 'status_code', 0, function(self, code) {
  return self.internal.statusCode;
});

$.define_method(Response, 'status_code=', 1, function(self, code) {
  self.internal.statusCode = this.to_int(code);

  return code;
});

$.define_method(Response, 'get_header', 1, function(self, name) {
  return self.internal.getHeader(this.to_str(name).value);
});

$.define_method(Response, 'set_header', 2, function(self, name, value) {
  self.internal.setHeader(this.to_str(name).value, this.to_str(value).value);

  return this.builtin.Qnil;
});

$.define_method(Response, 'remove_header', 1, function(self, name) {
  return self.internal.removeHeader(this.to_str(name).value);
});

$.define_method(Response, 'write', 1, function(self, data) {
  self.internal.write(this.to_str(data).value);

  return self;
});

$.define_method(Response, 'end', -1, function(self, args) {
  this.check_args(args, 0, 1);
  var data = args[0];
  if(data) data = this.to_str(data).value;

  self.internal.end(data);

  return self;
});

module.exports = {
  NodeJS: {
    Response: Response,
  },
};

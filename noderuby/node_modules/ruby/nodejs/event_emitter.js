var $ = require('ruby');
var NodeJS = require('ruby/nodejs');

var EventEmitter = $.define_module_under(NodeJS, 'EventEmitter');

EventEmitter.events = {
  'newListener': function(event, listener) {
    return [ this.string_new(event), listener.orig ];
  }
}

function addListenerWith(func, self, event, block) {
  var handler = undefined, klass = self.klass;

  while(handler == undefined) {
    var real_klass = klass;
    if(klass.type == 'module_proxy')
      real_klass = real_klass.klass;

    handler = real_klass.events[event];

    klass = klass.superklass;
  }

  if(handler == undefined)
    throw new Error("event " + event + " is not defined for class " +
                      this.obj_classname(self));

  var protector = $.protect_node(function() {
    var new_args = [];
    if(handler != null)
      new_args = handler.apply($, arguments);

    $.funcall2(block, 'call', new_args);
  });
  protector.orig = block;
  block.wrapper = protector;

  func.call(self.internal, event, protector);
}

$.define_method(EventEmitter, 'on', 1, function(self, event) {
  var event = this.to_str(event).value, block = this.block_proc();

  addListenerWith(self.internal.on, self, event, block);

  return this.builtin.Qnil;
});
$.alias_method(EventEmitter, 'add_listener', 'on');

$.define_method(EventEmitter, 'once', 1, function(self, event) {
  var event = this.to_str(event).value, block = this.block_proc();

  addListenerWith(self.internal.once, self, event, block);

  return this.builtin.Qnil;
});

$.define_method(EventEmitter, 'remove_all_listeners', 1, function(self, event) {
  self.internal.removeAllListeners(this.to_str(event).value);

  return this.builtin.Qnil;
});

$.define_method(EventEmitter, 'set_max_listeners', 1, function(self, max) {
  self.internal.setMaxListeners(this.to_int(max));

  return this.builtin.Qnil;
});

$.define_method(EventEmitter, 'remove_listener', 2, function(self, event, block) {
  self.internal.removeListener(event, block.wrapper);

  return this.builtin.Qnil;
});

$.define_method(EventEmitter, 'listeners', 1, function(self, event) {
  var listeners = [], nodeListeners = self.internal.listeners(this.to_str(event).value);

  for(var i = 0; i < nodeListeners.length; i++)
    listeners.push(nodeListeners[i].orig);

  return listeners;
});

module.exports = EventEmitter;
